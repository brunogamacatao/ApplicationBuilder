## This is the template for creating JDBC entity classes
#macro (constructorParams $table)
#set ($params = "")
#foreach ($column in $table.getColumns())
#if($column.isPrimaryKey())
#set ($params = $params + ${column.getType().getJavaType()} + " ")
#set ($params = $params + ${stringUtils.columnToPropertyName($column.getName())} + ", ")
#end
#end
#set ($pLength = $params.length() - 2)
#set ($params = $params.substring(0, $pLength))
$params#end
#macro(exPkg)$exceptionsPackage#end
package $package;

#set ($hasReferences = false)
#foreach ($column in $table.getColumns())
#if ($column.getReferencedTable())
#set ($hasReferences = true)
#end
#end
#if ($hasReferences)
import #exPkg().DataException;
#foreach ($column in $table.getColumns())
#if ($column.getReferencedTable())
import ${daoPackage}.${stringUtils.tableToClassName($column.getReferencedTable().getName())}DAO;
#end
#end

#end
#if ($referencesTo)
import java.util.Collection;
#if (!$hasReferences)
import #exPkg().DataException;
#end
#foreach ($tab in $referencesTo)
import ${daoPackage}.${stringUtils.tableToClassName($tab.getName())}DAO;
#end

#end
/**
#if ($application.getDescription())
 * $application.getDescription()
 *
#end
 * This class represents the $table.getName() table in application.
 *
#if ($application.getAuthor())
 * @author $application.getAuthor()
#end
 */
public class $className {
#foreach ($column in $table.getColumns())
    private ${column.getType().getJavaType()} ${stringUtils.columnToPropertyName($column.getName())};
#end

    public $className (#constructorParams($table)) {
#foreach ($column in $table.getColumns())
#if ($column.isPrimaryKey())
        this.${stringUtils.columnToPropertyName($column.getName())} = ${stringUtils.columnToPropertyName($column.getName())};
#end
#end
    }

#foreach ($column in $table.getColumns())
    public ${column.getType().getJavaType()} get${stringUtils.tableToClassName($column.getName())} ( ) {
        return ${stringUtils.columnToPropertyName($column.getName())};
    }

#if (!$column.isPrimaryKey())
    public void set${stringUtils.tableToClassName($column.getName())} (${column.getType().getJavaType()} ${stringUtils.columnToPropertyName($column.getName())}) {
        this.${stringUtils.columnToPropertyName($column.getName())} = ${stringUtils.columnToPropertyName($column.getName())};
    }
#if ($column.getReferencedTable())
#*
 Add a flag variable to check if the referenced table has a single primary key.
 The reference method will only be added in this case.
*#
#set ($qtdColsInKey = 0)
#foreach ($col in $column.getReferencedTable().getColumns())
#if ($col.isPrimaryKey())
#set ($qtdColsInKey = $qtdColsInKey + 1)
#end
#end
#if ($qtdColsInKey == 1)
#set ($nmMethod = ${stringUtils.tableToClassName($column.getName())})
#set ($prefixLength = 0)
#if ($nmMethod.toLowerCase().startsWith("id") || $nmMethod.toLowerCase().startsWith("nr"))
#set ($prefixLength = 2)
#end
#if ($nmMethod.toLowerCase().startsWith("cod") || $nmMethod.toLowerCase().startsWith("num"))
#set ($prefixLength = 3)
#end
#if ($prefixLength > 0)
#set ($nmMethod = $nmMethod.substring($prefixLength))
#else
#set ($nmMethod = ${stringUtils.tableToClassName($column.getReferencedTable().getName())})
#end
    public ${stringUtils.tableToClassName($column.getReferencedTable().getName())} get$nmMethod ( ) throws DataException {
        return ${stringUtils.tableToClassName($column.getReferencedTable().getName())}DAO.getInstance().findByPrimaryKey(${stringUtils.columnToPropertyName($column.getName())});
    }
#end
#end
#end

#end
#*
Now we are going to add many-to-one reference methods.
*#
#if ($referencesTo)
#foreach ($tab in $referencesTo)
    public Collection<${stringUtils.tableToClassName($tab.getName())}> get${stringUtils.tableToClassName($tab.getName())}s ( ) throws DataException {
#set ($params = "")
#foreach($col in $tab.getColumns())
#if ($col.isPrimaryKey())
#set ($params = $params + "null, ")
#end
#end
#set ($pLength = $params.length() - 2)
#set ($params = $params.substring(0, $pLength))
        ${stringUtils.tableToClassName($tab.getName())} example = new ${stringUtils.tableToClassName($tab.getName())}($params);

#foreach ($col in $tab.getColumns())
#if ($col.getReferencedTable() && $col.getReferencedTable().equals($table))
        example.set${stringUtils.tableToClassName($col.getName())}(this.get${stringUtils.tableToClassName($col.getReferencedColumn().getName())}());
#end
#end

        return ${stringUtils.tableToClassName($tab.getName())}DAO.getInstance().findByExample(example);
    }

#end
#end
}