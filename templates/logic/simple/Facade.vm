## This is the template for creating a Facade class
#macro (primaryKey $table)
#set ($params = "")
#foreach ($column in $table.getColumns())
#if($column.isPrimaryKey())
#set ($params = $params + ${column.getType().getJavaType()} + " ")
#set ($params = $params + ${stringUtils.columnToPropertyName($column.getName())} + ", ")
#end
#end
#set ($pLength = $params.length() - 2)
#set ($params = $params.substring(0, $pLength))
$params#end
#macro (primaryKeyParams $table)
#set ($params = "")
#foreach ($column in $table.getColumns())
#if($column.isPrimaryKey())
#set ($params = $params + ${stringUtils.columnToPropertyName($column.getName())} + ", ")
#end
#end
#set ($pLength = $params.length() - 2)
#set ($params = $params.substring(0, $pLength))
$params#end
#macro(logicExPkg)$logicExceptionsPackage#end
package $package;

import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
#foreach($table in ${dataSource.getTables()})
#set($entityName = ${stringUtils.tableToClassName(${table.getName()})})
import ${entitiesPackage}.${entityName};
#end
#foreach($table in ${dataSource.getTables()})
#set($entityName = ${stringUtils.tableToClassName(${table.getName()})})
import ${boPackage}.${entityName}BO;
#end
import #logicExPkg().LogicException;

/**
#if ($application.getDescription())
 * $application.getDescription()
 *
#end
 * This class implements the facade design pattern, acting as a unique acess
 * point of the business/data logic by the presentation layer.
 *
#if ($application.getAuthor())
 * @author $application.getAuthor()
#end
 */
public class ${className} {
    private static Logger logger = Logger.getLogger(${className}.class.getName());

    //This is variable holds the unique instance of this class.
    private static ${className} instance;

    /**
     * This method must be used to obtain instances of this class, according to
     * the singleton design pattern.
     */
    public static ${className} getInstance() {
        if (instance == null) {
            instance = new ${className}();
        }

        return instance;
    }

    /**
     * This constructor is intentionally private. So, the unique way to obtain
     * an instance of this class is through the getInstance method. This is 
     * necessary to ensure the singleton design pattern.
     */
    private ${className}() {
    }

#foreach($table in ${dataSource.getTables()})
#set($entityName = ${stringUtils.tableToClassName(${table.getName()})})
    /**
     * This method is used to add new records to the $table.getName() table.
     * @param entity An instance of the $entityName class that contains all the
     * information necessary to add a new record to the database.
     */
    public void insert${entityName}($entityName entity) throws LogicException {
        ${entityName}BO.getInstance().insert(entity);
    }

    /**
     * This method deletes a record from the $table.getName() table.
     * @param entity An instance of the $entityName class that contains all the
     * information necessary to perform the record removal.
     */
    public void delete${entityName}($entityName entity) throws LogicException {
        ${entityName}BO.getInstance().delete(entity);
    }

    /**
     * This method updates a record within the $table.getName() table.
     * @param entity An instance of the $entityName class that contains all the
     * information necessary to update the desired record.
     */
    public void update${entityName}($entityName entity) throws LogicException {
        ${entityName}BO.getInstance().update(entity);
    }

    /**
     * This method returns an unique instance of the $entityName class, with
     * its properties values filled with data returned from a record from 
     * $table.getName() which satisfies the given primary key.
     */
    public $entityName find${entityName}ByPrimaryKey(#primaryKey($table)) throws LogicException {
        return ${entityName}BO.getInstance().findByPrimaryKey(#primaryKeyParams($table));
    }

    /**
     * This method performs a query for all the records of the $table.getName()
     * table.
     * @return A collection containing all the records of the $table.getName()
     * table.
     */
    public Collection<$entityName> findAll${entityName}s() throws LogicException {
        return ${entityName}BO.getInstance().findAll();
    }

    /**
     * This method performs a database query based on the values contained at
     * the example object. This object is used to build dynamically the SQL
     * query string.
     * @param example The example object.
     * @param A collection containing the query result.
     */
    public Collection<$entityName> find${entityName}ByExample($entityName example) throws LogicException {
        return ${entityName}BO.getInstance().findByExample(example);
    }
    
#end
}